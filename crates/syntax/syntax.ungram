Root = StrDec

SigDec = 'signature' SigBind*
SigBind = 'Name' '=' SigExp 'and'?

FunctorDec = 'functor' FunctorBind*
FunctorBind =
  functor_name:'Name'
  '(' FunctorArg ')' AscriptionTail?
  '=' body:StrExp 'and'?

FunctorArg = FunctorArgNameSigExp | Spec
FunctorArgNameSigExp = 'Name' ':' SigExp

StrDec = StrDecInSeq*
StrDecInSeq = StrDecOne ';'?

StrDecOne =
  DecStrDec
| StructureStrDec
| LocalStrDec
// these two are actually only allowed at the top level per the Definition, but we put them here so
// we can parse and emit a better error.
| SigDec
| FunctorDec

// don't need Dec here, because it won't be a sequence. this is because StrDec already allows
// sequences, and we prefer to make sequences of StrDecs over Decs.
//
// that is, if we have
//
// ```sml
// val x = 123
// val y = "hi"
// ```
//
// we could parse that as either
//
// 1. one StrDec containing a Dec sequence; or
// 2. one StrDec containing a StrDec sequence of 2 StrDecs, each of which contain 1 Dec.
//
// we prefer option 2.
DecStrDec = DecOne
StructureStrDec = 'structure' StrBind*
LocalStrDec = 'local' local_dec:StrDec 'in' in_dec:StrDec 'end'
StrBind = 'Name' AscriptionTail? '=' StrExp 'and'?

StrExp =
  StructStrExp
| PathStrExp
| AscriptionStrExp
| AppStrExp
| LetStrExp

StructStrExp = 'struct' StrDec 'end'
PathStrExp = Path
AscriptionStrExp = StrExp AscriptionTail
AppStrExp = 'Name' '(' AppStrExpArg ')'
LetStrExp = 'let' StrDec 'in' StrExp 'end'

// a bit annoying, but that's what my rudimentary syntax-gen requires.
AppStrExpArg = AppStrExpArgStrExp | StrDec
AppStrExpArgStrExp = StrExp

AscriptionTail = Ascription SigExp
Ascription = ':' | ':>'

SigExp =
  SigSigExp
| NameSigExp
| WhereSigExp

SigSigExp = 'sig' Spec 'end'
NameSigExp = 'Name'
WhereSigExp = SigExp WhereOrAnd 'type' TyVarSeq Path '=' Ty
WhereOrAnd = 'where' | 'and'

Spec = SpecInSeq* SharingTail*
SpecInSeq = SpecOne ';'?

SpecOne =
  ValSpec
| TySpec
| EqTySpec
| DatSpec
| DatCopySpec
| ExSpec
| StrSpec
| IncludeSpec

ValSpec = 'val' ValDesc*
TySpec = 'type' TyDesc*
EqTySpec = 'eqtype' TyDesc*
// DatDesc and ConDesc are basically the same as DatBind and ConBind in the grammar.
DatSpec = 'datatype' DatBind*
DatCopySpec = lhs_kw:'datatype' 'Name' '=' rhs_kw:'datatype' Path
ExSpec = 'exception' ExDesc*
StrSpec = 'structure' StrDesc*
IncludeSpec = 'include' SigExp*

SharingTail = 'sharing' 'type'? PathEq*

ValDesc = NameStarEq ':' Ty 'and'?
// the Definition only gives lowering for the `= ty` case for `type` descriptions.
TyDesc = TyVarSeq 'Name' EqTy? 'and'?
ExDesc = NameStarEq OfTy? 'and'?
StrDesc = 'Name' ':' SigExp 'and'?
EqTy = '=' Ty

PathEq = Path '='?

Exp =
  SConExp
| PathExp
| RecordExp
| SelectorExp
| ParenExp
| TupleExp
| ListExp
| VectorExp
| SeqExp
| LetExp
| AppExp
| InfixExp
| TypedExp
| AndalsoExp
| OrelseExp
| HandleExp
| RaiseExp
| IfExp
| WhileExp
| CaseExp
| FnExp

SConExp = SCon
PathExp = 'op'? Path
RecordExp = '{' ExpRow* '}'
SelectorExp = '#' Lab
ParenExp = '(' Exp ')'
TupleExp = '(' ExpArg* ')'
ListExp = '[' ExpArg* ']'
VectorExp = '#' ListExp
SeqExp = '(' exps_in_seq:ExpInSeq* ')'
LetExp = 'let' Dec 'in' exps_in_seq:ExpInSeq* 'end'
AppExp = func:Exp arg:Exp
InfixExp = lhs:Exp NameStarEq rhs:Exp
TypedExp = Exp ':' Ty
AndalsoExp = lhs:Exp 'andalso' rhs:Exp
OrelseExp = lhs:Exp 'orelse' rhs:Exp
HandleExp = Exp 'handle' Matcher
RaiseExp = 'raise' Exp
IfExp = 'if' cond:Exp 'then' yes:Exp 'else' no:Exp
WhileExp = 'while' cond:Exp 'do' body:Exp
CaseExp = 'case' Exp 'of' Matcher
FnExp = 'fn' Matcher

ExpRow = Lab '=' Exp ','?
ExpArg = Exp ','?
ExpInSeq = Exp ';'?

// call it this instead of Match to avoid clash with rust kw
Matcher = MatchRule*
MatchRule = Pat '=>' Exp '|'?

Dec = DecInSeq*
DecInSeq = DecOne ';'?

DecOne =
  ValDec
| FunDec
| TyDec
| DatDec
| DatCopyDec
| AbstypeDec
| ExDec
| LocalDec
| OpenDec
| InfixDec
| InfixrDec
| NonfixDec

ValDec = 'val' TyVarSeq ValBind*
FunDec = 'fun' TyVarSeq FunBind*
TyDec = 'type' TyBind*
DatDec = 'datatype' DatBind* WithType?
DatCopyDec = lhs_kw:'datatype' 'Name' '=' rhs_kw:'datatype' Path
AbstypeDec = 'abstype' DatBind* WithType? 'with' Dec 'end'
ExDec = 'exception' ExBind*
LocalDec = 'local' local_dec:Dec 'in' in_dec:Dec 'end'
OpenDec = 'open' Path*
InfixDec = 'infix' 'IntLit'? NameStarEq*
InfixrDec = 'infixr' 'IntLit'? NameStarEq*
NonfixDec = 'nonfix' NameStarEq*

ValBind = 'rec'? Pat '=' Exp 'and'?
FunBind = FunBindCase* 'and'?
TyBind = TyVarSeq 'Name' '=' Ty 'and'?
DatBind = TyVarSeq 'Name' '=' ConBind* 'and'?
ConBind = 'op'? NameStarEq OfTy? '|'?
ExBind = 'op'? NameStarEq ExBindInner? 'and'?

FunBindCase = FunBindCaseHead Pat* TyAnnotation? '=' Exp '|'?
FunBindCaseHead = PrefixFunBindCaseHead | InfixFunBindCaseHead
PrefixFunBindCaseHead = 'op'? NameStarEq
InfixFunBindCaseHead = '('? lhs:Pat NameStarEq rhs:Pat ')'?

ExBindInner = OfTy | EqPath
EqPath = '=' Path
WithType = 'withtype' TyBind*

Pat =
  WildcardPat
| SConPat
| ConPat
| RecordPat
| ParenPat
| TuplePat
| ListPat
| VectorPat
| InfixPat
| TypedPat
| TypedNamePat
| OrPat
| AsPat

WildcardPat = '_'
SConPat = SCon
ConPat = 'op'? Path Pat?
RecordPat = '{' PatRow* '}'
ParenPat = '(' Pat ')'
TuplePat = '(' PatArg* ')'
ListPat = '[' PatArg* ']'
VectorPat = '#' ListPat
InfixPat = lhs:Pat NameStarEq rhs:Pat
TypedPat = Pat TyAnnotation
// rather annoying, but this makes the parser a bit easier to write.
TypedNamePat = 'op'? NameStarEq TyAnnotation
OrPat = lhs:Pat '|' rhs:Pat
AsPat = 'op'? NameStarEq TyAnnotation? AsPatTail

PatRow = PatRowInner ','?
PatRowInner =
  RestPatRow
| LabAndPatPatRow
| LabPatRow

RestPatRow = '...'
LabAndPatPatRow = Lab '=' Pat
LabPatRow = NameStarEq TyAnnotation? AsPatTail?

AsPatTail = 'as' Pat
PatArg = Pat ','?

Ty =
  TyVarTy
| RecordTy
| ConTy
| OneArgConTy
| TupleTy
| FnTy
| ParenTy

TyVarTy = 'TyVar'
RecordTy = '{' TyRow* '}'
ConTy = TySeq? Path
// rather annoying, but this makes the parser a bit easier to write.
OneArgConTy = Ty Path
TupleTy = Ty StarTy*
FnTy = param:Ty '->' res:Ty
ParenTy = '(' Ty ')'

StarTy = '*' Ty
TyRow = Lab ':' Ty ','?

OfTy = 'of' Ty
TyAnnotation = ':' Ty

Path = NameStarEqDot*
NameStarEqDot = NameStarEq '.'?

TySeq = '(' TyArg* ')'
TyArg = Ty ','?

TyVarSeq = '('? TyVarArg* ')'?
TyVarArg = 'TyVar' ','?

Lab = 'Name' | '*' | 'IntLit'

// NameStarEq can be a Name, *, or =, maybe. though, depending on the circumstance, only * and not =
// may be additionally allowed (like for patterns). TODO maybe we should have separate classes of
// Name for alphanumeric and symbolic.
NameStarEq = 'Name' | '*' | '='

SCon =
  'IntLit'
| 'RealLit'
| 'WordLit'
| 'CharLit'
| 'StringLit'
