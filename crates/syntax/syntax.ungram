Root = TopDec*

TopDec =
  StrDec
| SigDec
| FunctorDec

SigDec = 'signature' SigBind*
SigBind = 'Name' '=' SigExp 'and'?

FunctorDec = 'functor' FunctorBind*
FunctorBind = functor_name:'Name' '(' param:'Name' ':' param_sig:SigExp ')' '=' body:StrExp 'and'?

StrDec = StrDecInSeq*
StrDecInSeq = StrDecOne ';'?

StrDecOne =
  DecStrDec
| StructureStrDec
| LocalStrDec

DecStrDec = Dec
StructureStrDec = 'structure' StrBind*
LocalStrDec = 'local' local_dec:StrDec 'in' in_dec:StrDec 'end'
StrBind = 'Name' '=' StrExp 'and'?

StrExp =
  StructStrExp
| PathStrExp
| AscriptionStrExp
| AppStrExp
| LetStrExp

StructStrExp = 'struct' StrDec 'end'
PathStrExp = Path
AscriptionStrExp = StrExp AscriptionTail
AppStrExp = 'Name' '(' StrExp ')'
LetStrExp = 'let' StrDec 'in' StrExp 'end'

AscriptionTail = Ascription SigExp
Ascription = ':' | ':>'

SigExp =
  SigSigExp
| NameSigExp
| WhereSigExp

SigSigExp = 'sig' Spec 'end'
NameSigExp = 'Name'
WhereSigExp = SigExp 'where' 'type' TyVarSeq Path '=' Ty

Spec = SpecInSeq*
SpecInSeq = SpecOne ';'?

SpecOne =
  ValSpec
| TySpec
| EqTySpec
| DatSpec
| DatCopySpec
| ExSpec
| StrSpec
| IncludeSpec
| SharingSpec

ValSpec = 'val' ValDesc*
TySpec = 'type' TyDesc*
EqTySpec = 'eqtype' TyDesc*
// DatDesc and ConDesc are basically the same as DatBind and ConBind in the grammar.
DatSpec = 'datatype' DatBind*
DatCopySpec = lhs_kw:'datatype' 'Name' '=' rhs_kw:'datatype' Path
ExSpec = 'exception' ExDesc*
StrSpec = 'structure' StrDesc*
IncludeSpec = 'include' SigExp*
SharingSpec = SpecOne 'sharing' 'type' PathEq*

ValDesc = 'Name' ':' Ty 'and'?
TyDesc = TyVarSeq 'Name' 'and'?
ExDesc = 'Name' OfTy? 'and'?
StrDesc = 'Name' ':' SigExp 'and'?

PathEq = Path '='?

Exp =
  SConExp
| PathExp
| RecordExp
| SelectorExp
| TupleExp
| ListExp
| SeqExp
| LetExp
| AppExp
| InfixExp
| TypedExp
| AndalsoExp
| OrelseExp
| HandleExp
| RaiseExp
| IfExp
| WhileExp
| CaseExp
| FnExp

SConExp = SCon
PathExp = 'op'? Path
RecordExp = '{' ExpRow* '}'
SelectorExp = '#' Lab
TupleExp = '(' ExpArg* ')'
ListExp = '[' ExpArg* ']'
SeqExp = '(' exps_in_seq:ExpInSeq* ')'
LetExp = 'let' Dec 'in' exps_in_seq:ExpInSeq* 'end'
AppExp = func:Exp arg:Exp
InfixExp = lhs:Exp 'Name' rhs:Exp
TypedExp = Exp ':' Ty
AndalsoExp = lhs:Exp 'andalso' rhs:Exp
OrelseExp = lhs:Exp 'orelse' rhs:Exp
HandleExp = Exp 'handle' Matcher
RaiseExp = 'raise' Exp
IfExp = 'if' cond:Exp 'then' yes:Exp 'else' no:Exp
WhileExp = 'while' cond:Exp 'do' body:Exp
CaseExp = 'case' Exp 'of' Matcher
FnExp = 'fn' Matcher

ExpRow = Lab '=' Exp ','?
ExpArg = Exp ','?
ExpInSeq = Exp ';'?

// call it this instead of Match to avoid clash with rust kw
Matcher = MatchRule*
MatchRule = Pat '=>' Exp '|'?

Dec = DecInSeq*
DecInSeq = DecOne ';'?

DecOne =
  ValDec
| FunDec
| TyDec
| DatDec
| DatCopyDec
| AbstypeDec
| ExDec
| LocalDec
| OpenDec
| InfixDec
| InfixrDec
| NonfixDec

ValDec = 'val' TyVarSeq ValBind*
FunDec = 'fun' TyVarSeq FunBind*
TyDec = 'type' TyBind*
DatDec = 'datatype' DatBind* WithType?
DatCopyDec = lhs_kw:'datatype' 'Name' '=' rhs_kw:'datatype' Path
AbstypeDec = 'abstype' DatBind* WithType? 'with' Dec 'end'
ExDec = 'exception' ExBind*
LocalDec = 'local' local_dec:Dec 'in' in_dec:Dec 'end'
OpenDec = 'open' Path*
InfixDec = 'infix' 'IntLit'? 'Name'*
InfixrDec = 'infixr' 'IntLit'? 'Name'*
NonfixDec = 'nonfix' 'Name'*

ValBind = 'rec'? Pat '=' Exp 'and'?
FunBind = FunBindCase* 'and'?
TyBind = TyVarSeq 'Name' '=' Ty 'and'?
DatBind = TyVarSeq 'Name' '=' ConBind* 'and'?
ConBind = 'op'? 'Name' OfTy? '|'?
ExBind = 'op'? 'Name' ExBindInner? 'and'?

FunBindCase = FunBindCaseHead Pat* TyAnnotation? '=' Exp '|'?
FunBindCaseHead = PrefixFunBindCaseHead | InfixFunBindCaseHead
PrefixFunBindCaseHead = 'op'? 'Name'
InfixFunBindCaseHead = '('? lhs:Pat 'Name' rhs:Pat ')'?

ExBindInner = OfTy | EqPath
EqPath = '=' Path
WithType = 'withtype' TyBind*

Pat =
  WildcardPat
| SConPat
| ConPat
| RecordPat
| TuplePat
| ListPat
| InfixPat
| TypedPat
| AsPat

WildcardPat = '_'
SConPat = SCon
ConPat = 'op'? Path Pat?
RecordPat = '{' PatRow* '}'
TuplePat = '(' PatArg* ')'
ListPat = '[' PatArg* ']'
InfixPat = lhs:Pat 'Name' rhs:Pat
TypedPat = Pat TyAnnotation
AsPat = 'op'? 'Name' TyAnnotation? AsPatTail

PatRow = PatRowInner ','?
PatRowInner =
  RestPatRow
| LabAndPatPatRow
| LabPatRow

RestPatRow = '...'
LabAndPatPatRow = Lab '=' Pat
LabPatRow = 'Name' TyAnnotation? AsPatTail?

AsPatTail = 'as' Pat
PatArg = Pat ','?

Ty =
  TyVarTy
| RecordTy
| ConTy
| TupleTy
| FnTy
| ParenTy

TyVarTy = 'TyVar'
RecordTy = '{' TyRow* '}'
ConTy = TySeq? Path
TupleTy = TyStar*
FnTy = param:Ty '->' res:Ty
ParenTy = '(' Ty ')'

TyStar = Ty '*'?
TyRow = Lab ':' Ty ','?

OfTy = 'of' Ty
TyAnnotation = ':' Ty

Path = NameDot*
NameDot = 'Name' '.'?

TySeq = '('? TyArg* ')'?
TyArg = Ty ','?

TyVarSeq = '('? TyVarArg* ')'?
TyVarArg = 'TyVar' ','?

Lab = NameLab | IntLitLab
NameLab = 'Name'
IntLitLab = 'IntLit'

SCon =
  'IntLit'
| 'RealLit'
| 'WordLit'
| 'CharLit'
| 'StringLit'
